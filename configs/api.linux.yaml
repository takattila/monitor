on_start:
  port: 7070
  routes:
    all: /all
    playground: /play
    model: /model
    cpu: /cpu
    memory: /memory
    processes: /processes
    storages: /storages
    services: /services
    network: /network
    toggle: /toggle/{section}/{status}
    run:
      list: /run/list
      exec: /run/exec/{name}
      stdout: /run/stdout/{name}
    skins: /skins
    logos: /logos
  logger:
    level: debug
    color: on
on_runtime:
  # physical_memory: 1GB
  # memory:
  #     - bash
  #     - -c
  #     - |
  #       FREE_OUTPUT=$(free -b); \
  #       VMSTAT_OUTPUT=$(vmstat); \
  #       \
  #       function convert_bytes() { \
  #           local bytes=$1; \
  #           local units=("B" "KB" "MB" "GB" "TB"); \
  #           local unit_index=0; \
  #           local converted_value=$bytes; \
  #       \
  #           if (( bytes > 1024 )); then \
  #               until (( converted_value < 1024 )) || (( unit_index >= ${#units[@]} )); do \
  #                   converted_value=$(( converted_value / 1024 )); \
  #                   (( unit_index++ )); \
  #               done; \
  #           fi; \
  #       \
  #           echo "$converted_value ${units[$unit_index]}"; \
  #       }; \
  #       \
  #       read -r _ total_b used_b free_b shared_b buff_cache_b available_b <<< "$(echo "$FREE_OUTPUT" | grep 'Mem:')"; \
  #       read -r _ swap_total_b swap_used_b _ <<< "$(echo "$FREE_OUTPUT" | grep 'Swap:')"; \
  #       \
  #       read -r _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ io_wait _ <<< "$(echo "$VMSTAT_OUTPUT" | tail -1)"; \
  #       \
  #       used_pct=$(( total_b > 0 ? 100 * used_b / total_b : 0 )); \
  #       free_pct=$(( total_b > 0 ? 100 * free_b / total_b : 0 )); \
  #       cached_pct=$(( total_b > 0 ? 100 * buff_cache_b / total_b : 0 )); \
  #       avail_pct=$(( total_b > 0 ? 100 * available_b / total_b : 0 )); \
  #       swap_pct=$(( swap_total_b > 0 ? 100 * swap_used_b / swap_total_b : 0 )); \
  #       \
  #       read -r total_val total_unit <<< "$(convert_bytes "$total_b")"; \
  #       read -r used_val used_unit <<< "$(convert_bytes "$used_b")"; \
  #       read -r free_val free_unit <<< "$(convert_bytes "$free_b")"; \
  #       read -r cached_val cached_unit <<< "$(convert_bytes "$buff_cache_b")"; \
  #       read -r available_val available_unit <<< "$(convert_bytes "$available_b")"; \
  #       read -r swap_total_val swap_total_unit <<< "$(convert_bytes "$swap_total_b")"; \
  #       read -r swap_used_val swap_used_unit <<< "$(convert_bytes "$swap_used_b")"; \
  #       \
  #       JSON_OUTPUT=$( \
  #           printf '{"memory_info": {' \
  #           printf '"total": {"total": %d, "total_unit": "%s", "actual": %d, "actual_unit": "%s", "percent": 100},' "$total_val" "$total_unit" "$total_val" "$total_unit"; \
  #           printf '"used": {"total": %d, "total_unit": "%s", "actual": %d, "actual_unit": "%s", "percent": %d},' "$total_val" "$total_unit" "$used_val" "$used_unit" "$used_pct"; \
  #           printf '"free": {"total": %d, "total_unit": "%s", "actual": %d, "actual_unit": "%s", "percent": %d},' "$total_val" "$total_unit" "$free_val" "$free_unit" "$free_pct"; \
  #           printf '"cached": {"total": %d, "total_unit": "%s", "actual": %d, "actual_unit": "%s", "percent": %d},' "$total_val" "$total_unit" "$cached_val" "$cached_unit" "$cached_pct"; \
  #           printf '"available": {"total": %d, "total_unit": "%s", "actual": %d, "actual_unit": "%s", "percent": %d},' "$total_val" "$total_unit" "$available_val" "$available_unit" "$avail_pct"; \
  #           printf '"swap": {"total": %d, "total_unit": "%s", "actual": %d, "actual_unit": "%s", "percent": %d},' "$swap_total_val" "$swap_total_unit" "$swap_used_val" "$swap_used_unit" "$swap_pct"; \
  #           printf '"io_wait": {"total": 100, "total_unit": "%%", "actual": %d, "actual_unit": "%%", "percent": %d}' "$io_wait" "$io_wait"; \
  #           printf '}}'; \
  #       ); \
  #       \
  #       echo "$JSON_OUTPUT";
  commands:
    # cpu_temp:
    #   - bash
    #   - -c
    #   - |
    #     cat /sys/class/thermal/thermal_zone*/temp \
    #     | column -s $'\t' -t \
    #     | sed 's/\(.\)..$/.\1/'
    model_name:
      - bash
      - -c
      - | 
        hostnamectl \
          | grep Operating \
          | awk -F: '{print $2}' \
          | xargs
    processes:
      - bash
      - -c
      - |
        ps -ewwo pid,user,%mem,%cpu,cmd \
          --sort=-%cpu --no-headers \
          | head -n 10 \
          | tail -n 10
    service_is_active:
      - bash
      - -c
      - systemctl is-active {service} || true
    service_is_enabled:
      - bash
      - -c
      - systemctl is-enabled {service} || true
    storage:
      - bash
      - -c
      - |
        df -B1 \
          | grep -v tmpfs \
          | grep -v none \
          | grep -v snap \
          | awk '(NR>1)' \
          | sort -k 6
  services_list:
    - monitor-api
    - monitor-web
    - smbd
    - sshd
    - syslog
  run:
    ping_10_localhost:
      - ping -c 10 localhost
    ping_50_localhost:
      - ping -c 50 localhost
    find_pi:
      - |
        dash -c 'find /home/pi /usr -name pi'
    get_storages:
      - |
        df -B1 \
          | grep -v tmpfs \
          | grep -v none \
          | grep -v snap \
          | awk '(NR>1)' \
          | sort -k 6
    list_media:
      - |
        for f in $(ls -d /media/*); do 
          echo "- Content of $f:";
          echo "$(for d in $(ls -d $f/* 2>/dev/null); do echo "  - $d"; done)";
        done
    processes:
      - dash
      - -c
      - |
        "
          ps -ewwo pid,user,%mem,%cpu,cmd \
            --sort=-%cpu --no-headers \
            | head -n 10 \
            | tail -n 10
        " 
    services:
      - systemctl list-units --type=service